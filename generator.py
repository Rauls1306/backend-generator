import openai
import time
import os
from docx import Document
from docx_writer import save_article_to_docx
from datetime import datetime
from reference_writer import generate_reference_doc
from citation_generator import CitationGenerator
from generator_utils import (
    generate_apa_references,
    generate_textual_citations,
    insert_citations_into_text
)


openai.api_key = os.environ.get("OPENAI_API_KEY")

def gpt(prompt):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.65,
            max_tokens=2000
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"Error al generar contenido: {str(e)}"

def extract_concepts(titulo):
    prompt = (
        f"Del siguiente t√≠tulo acad√©mico: {titulo}, extrae dos conceptos principales: uno t√©cnico desde la profesi√≥n del usuario y otro contextual desde el entorno o sector involucrado. "
        f"Devu√©lvelos sin comillas, en min√∫sculas, sin numeraci√≥n, separados por salto de l√≠nea."
    )
    resultado = gpt(prompt)
    return [v.strip() for v in resultado.split("\n") if v.strip()]

def generate_article(tema, nivel, pais):
    doc = Document()
    doc.add_heading("Art√≠culo generado autom√°ticamente", 0)
    doc.add_paragraph(f"Tema ingresado: {tema}")
    doc.add_paragraph(f"Nivel de indexaci√≥n: {nivel}")
    doc.add_paragraph("")

    # T√çTULO
    prompt_titulo = (
        f"A partir del siguiente input informal: '{tema}', genera un t√≠tulo acad√©mico formal con redacci√≥n Scopus. "
        f"Debe contener una combinaci√≥n entre un concepto t√©cnico derivado de la carrera y otro del entorno. "
        f"No repitas frases del input, no uses comillas ni f√≥rmulas gen√©ricas como 'un estudio sobre' o 'intersecci√≥n entre'."
    )
    titulo = gpt(prompt_titulo)
    doc.add_heading(titulo, level=1)
    time.sleep(2)
    
    # VARIABLES
    variables = extract_concepts(titulo)
    print("üìå Variables extra√≠das del t√≠tulo:", variables)
    variable_1 = variables[0] if len(variables) > 0 else "variable t√©cnica no identificada"
    variable_2 = variables[1] if len(variables) > 1 else "variable contextual no identificada"

    doc.add_heading(titulo, level=1)
    time.sleep(2)

    # CONTEXTO
    contexto = gpt(
        f"Redacta un texto as√≠ sobre la problem√°tica del art√≠culo titulado '{titulo}', mismo tama√±o, mismo 1 p√°rrafo, recuerda, sin usar datos cuantitativos, NO MENCIONES EL TITULO DE LA INVESTIGACION. HAZLO COMO ESTE MODELO: Los polifenoles han demostrado tener un impacto positivo en la reducci√≥n de los niveles lip√≠dicos..."
    )
    if "Error al generar contenido" in contexto:
        raise ValueError("‚ùå GPT no gener√≥ el contexto correctamente.")
    time.sleep(2)

    # MUNDIAL / LATAM / PA√çS
    mundial_latam_peru = gpt(
        f"Redacta un texto de 3 p√°rrafos, c/u de 100 palabras, todo estilo scopus q1, sobre la problem√°tica del art√≠culo titulado '{titulo}'. "
        f"Cada p√°rrafo es por un nivel: el primer p√°rrafo nivel global o mundial, segundo nivel LATAM, tercero nivel nacional del pa√≠s {pais}. "
        f"Cada p√°rrafo debe tener 3 datos cuantitativos (solo uno porcentual, los otros 2 numericos, IMPORTANTEeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee). "
        f"No incluyas citas ni menciones a instituciones (IMPORTANTISIMO) ni ambig√ºedades como 'cerca de' o 'casi'. No uses conectores de cierre. "
        f"Cada p√°rrafo debe iniciar mencionando el nivel (ejemplo: A nivel global, En Latinoam√©rica, En el contexto de {pais}). "
        f"Adem√°s, cada p√°rrafo debe tener 2 datos cualitativos. TODA SOLO INFORMACION DE LOS ULTIMOS 5 A√ëOS. importante, no uses la palabra \"CUALITATIVA\" ni similares"
    )
    print("üß™ Respuesta de GPT para niveles:", mundial_latam_peru)
    if "Error al generar contenido" in mundial_latam_peru:
        raise ValueError("‚ùå GPT no gener√≥ el niveles_raw correctamente.")
    niveles = [p.strip() for p in mundial_latam_peru.split("\n\n") if p.strip()]
    while len(niveles) < 3:
        niveles.append("‚ö†Ô∏è Contenido faltante generado autom√°ticamente.")
    mundial, latam, peru = niveles[:3]
    time.sleep(2)

    # PROBLEMA
    problema = gpt(
        f"Red√°ctame un p√°rrafo como este sobre problema, causas y consecuencias sobre la problem√°tica del art√≠culo titulado '{titulo}', en 90 palabras, redactado como para scopus q1, sin datos cuantitativos, sin citas, sin tanta puntuaci√≥n o separaci√≥n en las oraciones, que sea un p√°rrafo fluido..."
    )
    if "Error al generar contenido" in problema:
        raise ValueError("‚ùå GPT no gener√≥ el problema correctamente.")
    time.sleep(2)

    # JUSTIFICACI√ìN
    justificacion = gpt(
        f"Redacta un p√°rrafo de justificaci√≥n, por relevancia, importancia, etc., de 100 palabras, estilo scopus q1, que empiece con la frase 'se justifica'. No menciones el t√≠tulo del art√≠culo en esta justificaci√≥n."
    )
    if "Error al generar contenido" in justificacion:
        raise ValueError("‚ùå GPT no gener√≥ el justificacion correctamente.")
    time.sleep(2)

    # TEOR√çAS
    teorias = gpt(
        f"Busca dos teor√≠as para una investigaci√≥n que combina '{variable_1}' y '{variable_2}'. "
        f"Redacta un p√°rrafo de 150 palabras para cada una. Menciona nombre de la teor√≠a, padre, explicaci√≥n. Sin subt√≠tulos ni conectores de cierre."
    )
    if "Error al generar contenido" in teorias:
        raise ValueError(f"‚ùå Error generado por GPT al obtener teor√≠as: {teorias}")

    teorias_split = teorias.split("\n\n")
    while len(teorias_split) < 2:
        teorias_split.append("‚ö†Ô∏è Teor√≠a faltante")
    teoria1, teoria2 = teorias_split[:2]
    time.sleep(2)

    # CONCEPTOS
    conceptos = gpt(
        f"A partir de los conceptos '{variable_1}' y '{variable_2}', redacta para cada uno dos p√°rrafos de 100 palabras. "
        f"Cada p√°rrafo debe iniciar con un conector de adici√≥n (como: de manera concordante, en consonancia con lo anterior...). "
        f"No menciones que son variables, no uses t√≠tulos ni encabezados. Todo en prosa acad√©mica continua."
    )
    if "Error al generar contenido" in conceptos:
        raise ValueError("‚ùå GPT no gener√≥ el conceptos correctamente.")
    conceptos_divididos = conceptos.split("\n\n")
    while len(conceptos_divididos) < 5:
        conceptos_divididos.append("")

    concepto1_p1, concepto1_p2 = conceptos_divididos[0], conceptos_divididos[1]
    concepto2_p1, concepto2_p2, concepto2_p3 = conceptos_divididos[2], conceptos_divididos[3], conceptos_divididos[4]

    # GENERAR ART√çCULO COMPLETO
    generated_text = {
        "contexto": contexto,
        "mundial": mundial,
        "latam": latam,
        "peru": peru,
        "problema": problema,
        "justificacion": justificacion,
        "teoria1": teoria1,
        "teoria2": teoria2,
        "concepto1_p1": concepto1_p1,
        "concepto1_p2": concepto1_p2,
        "concepto2_p1": concepto2_p1,
        "concepto2_p2": concepto2_p2,
        "concepto2_p3": concepto2_p3,
        "variable1_title": variable_1,
        "variable2_title": variable_2,
    }

    citation_generator = CitationGenerator(title=titulo, generated_text=generated_text)
    citation_generator.generate_all_citations()
    cited_texts = citation_generator.insert_all_citations()
    reference_filename = generate_reference_doc(
    titulo=titulo,
    pais=pais,
    referencias_dict=cited_texts 
)

    # Concatenar el texto final con citas insertadas
    final_article = ""
    for key in [
        "contexto", "mundial", "latam", "peru", "problema", "justificacion",
        "teoria1", "teoria2",
        "concepto1_p1", "concepto1_p2",
        "concepto2_p1", "concepto2_p2", "concepto2_p3"
    ]:
        value = cited_texts.get(key)
        if isinstance(value, str):
            final_article += value.strip() + "\n\n"
        else:
            print(f"‚ö†Ô∏è Advertencia: El bloque '{key}' est√° ausente o no es texto v√°lido. Valor: {value}")

    final_article = final_article.strip()
    if not final_article or len(final_article) < 100:
        raise ValueError("‚ùå El contenido del art√≠culo es muy corto o vac√≠o. No se generar√° el Word.")

    filename = f"articulo_{datetime.now().strftime('%Y%m%d%H%M%S')}.docx"
    save_article_to_docx(final_article, filename)

    # Generar documento de referencias usando el texto citado
    # Agrupar los textos relacionados a las variables
    variable1_texts = [
        cited_texts.get("concepto1_p1", ""),
        cited_texts.get("concepto1_p2", "")
    ]

    variable2_texts = [
        cited_texts.get("concepto2_p1", ""),
        cited_texts.get("concepto2_p2", ""),
        cited_texts.get("concepto2_p3", "")
    ]

    # Preparar diccionario para referencias
    referencias_dict = {
        "mundial": [cited_texts.get("mundial", "")],
        "latam": [cited_texts.get("latam", "")],
        "peru": [cited_texts.get("peru", "")],
        "teoria1": [cited_texts.get("teoria1", "")],
        "teoria2": [cited_texts.get("teoria2", "")],
        "variable1": [t for t in variable1_texts if t],
        "variable2": [t for t in variable2_texts if t],
    }

    reference_filename = generate_reference_doc(
        titulo=titulo,
        pais=pais,
        referencias_dict=referencias_dict
    )

    print(f"üìé Plantilla de referencias generada: {reference_filename}")
    return filename, reference_filename
